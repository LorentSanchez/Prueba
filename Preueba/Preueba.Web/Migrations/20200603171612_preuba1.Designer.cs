// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Preueba.Web.Data.Entities;

namespace Prueba.Web.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20200603171612_preuba1")]
    partial class preuba1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Preueba.Web.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int>("StateId");

                    b.HasKey("CityId");

                    b.HasIndex("StateId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("Preueba.Web.Models.Neighborhood", b =>
                {
                    b.Property<int>("NeighborhoodId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId");

                    b.Property<string>("NeighborhoodName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("NeighborhoodId");

                    b.HasIndex("CityId");

                    b.ToTable("Neighborhood");
                });

            modelBuilder.Entity("Preueba.Web.Models.Owner", b =>
                {
                    b.Property<int>("OwnerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApellidoC")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("DireccionC")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NombreC")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("TelefonC")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.HasKey("OwnerId");

                    b.ToTable("Owners");
                });

            modelBuilder.Entity("Preueba.Web.Models.State", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId");

                    b.Property<string>("StateName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("StateId");

                    b.HasIndex("CountryId");

                    b.ToTable("State");
                });

            modelBuilder.Entity("Prueba.Web.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("CountryId");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Prueba.Web.Models.TypeDocument", b =>
                {
                    b.Property<int>("IdDocumet")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Document")
                        .IsRequired();

                    b.Property<int?>("OwnerId");

                    b.Property<string>("TypeDocum")
                        .IsRequired();

                    b.HasKey("IdDocumet");

                    b.HasIndex("OwnerId");

                    b.ToTable("TypeDocument");
                });

            modelBuilder.Entity("Preueba.Web.Models.City", b =>
                {
                    b.HasOne("Preueba.Web.Models.State", "States")
                        .WithMany("Citys")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Preueba.Web.Models.Neighborhood", b =>
                {
                    b.HasOne("Preueba.Web.Models.City", "Citys")
                        .WithMany("Neighborhoods")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Preueba.Web.Models.State", b =>
                {
                    b.HasOne("Prueba.Web.Models.Country", "Countrys")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Prueba.Web.Models.TypeDocument", b =>
                {
                    b.HasOne("Preueba.Web.Models.Owner")
                        .WithMany("TypeDocuments")
                        .HasForeignKey("OwnerId");
                });
#pragma warning restore 612, 618
        }
    }
}
